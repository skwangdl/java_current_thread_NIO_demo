1. SpringBoot 化繁为简
    （1）与SpringMVC需要定义各种bean 实现，缓存，数据源，序列化，消息队列
        SpringBoot只需要注解定义，没有大量的繁琐配置
    （2）SpringBoot独立运行， 只需要运行 java -jar xxx.jar就可以启动服务
    （3）SpringBoot内嵌Sevlet容器（Tomcat）,将包打到一起，只需要运行就可以启动服务
    （4）SpringBoot简化固定配置
    （5）SpringBoot提供准生产的应用监控

    SpringBoot与microservice的关系：SpringBoot是java开发microservice的润滑剂

2. SpringCloud 简化Java的分布式系统，配置统一，负载均衡，服务间调用，事务管理
        为开发者快速构建具有分布式能力的服务（配置统一，服务注册，服务发现，断路器，服务间调用，
        负载均衡，全局锁，分布式Session）SpringCloud是一系列框架的集合，简化了Java分布式系统的开发

    SpringCloud与microservice: 侧重Java功能与开发microservice简单, 但是没有提供自动化部署与资源管理，
        产出为镜像

3. SpringCloud VS SpringBoot
    SpringBoot 意在简化，是一种开发，配置风格
    SpringCloud 意在简化分布式，是功能的集合，风格的统一

4. SpringCloud核心组件：
    Eureka 服务发现组件
    Ribbon 客户端负载均衡组件
    Hystrix 断路器
    Zuul 服务网关
    Spring Cloud Config 分布式配置

5. SpringBoot 常用注解：
    （1）@SpringBootApplication
        包含@Configuration   @EnableAutoConfiguration   @ComponentScan

        1.@EnableAutoConfiguration：
            启用SpringBoot自动配置机制，类似在Java中自动import，
            如果在pom.xml中配置了依赖spring-boot-starter-web,那么其jar包会加入到类路径
            classpath，spring会自动配置Tomcat和SpringMVC

            让 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置，一般加在主类上

        2.@Configuration：
            一个配置Bean的xml配置文件相当于@Configuration注释的类，说明该类为自定义配置的类，导出作用，为其他类
            提供Bean
            指出该类是 Bean 配置的信息源，相当于XML中的<beans></beans>，一般加在主类上。

        3.@ComponentScan：
            扫描所有使用@Component 的类，不管自动导入还是导出，首先需要告诉spring boot到哪里去找导入导出的原料
            如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean

    （2）@Repository
            用于标记数据访问组件，DAO层

    （3）@Service
            用于标注业务层组件

    （4）@RestController
        用于标注控制层组件,包含@Controller与@ResponseBody
            @ResponseBody:在形参列表上，用于将前台发送过来固定格式的数据(xml json)封装为对应的 JavaBean 对象，
                封装时使用到的一个对象是系统默认配置的 HttpMessageConverter进行解析，然后封装到形参上

    （5）@Component
        泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。

    （6）@Bean
        相当于XML中的<bean></bean>,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。

    （7）@AutoWired
        把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作

    （8）@Qualifier：
        当有多个同一类型的Bean时，可以用@Qualifier("name")来指定

    （9）@Resource(name="name",type="type")：
       没有括号内内容的话，默认byName。与@Autowired干类似的事

    （10）@RequestMapping：
        RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。
        用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径

    （11）@RequestParam：
        用在方法的参数前面。

    （12）@PathVariable:
        路径变量。参数与大括号里的名字一样要相同。
            RequestMapping("user/get/mac/{macAddress}")
            public String getByMacAddress(@PathVariable String macAddress){
            　　//do something;
            }

    （13）@Profiles
        Spring Profiles提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效。

    （14）@Profiles
        Spring Profiles提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效。
        任何@Component或@Configuration都能被@Profile标记，从而限制加载它的时机。

6. SpringBoot SpringCloud总结：
    Microservice通讯； RPC框架（dubbo/dubbox grpc）； 服务发现，部署，更新，扩容；服务编排；