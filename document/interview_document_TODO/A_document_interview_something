1. Synchronized 和 Reentrantlock 异同
    相同点: 都实现了多线程同步和内存可见性语义,都是可重入锁
    不同点:
        实现机制不同
            Synchronized
                （1）通过 java 对象头锁标记和 Monitor 对象实现
                （2）依赖 jvm 内存模型保证包含共享变量的多线程内存可见性
            Reentrantlock
                （1）通过 CAS、ASQ（AbstractQueuedSynchronizer）和 locksupport（用于阻塞和解除阻塞）实现
                （2）通过 ASQ 的 volatile state 保证包含共享变量的多线程内存可见性

        使用方式不同
            synchronized 可以修饰实例方法（锁住实例对象）、静态方法（锁住类对象）、代码块（显示指定锁对象）
            reentrantlock 显示调用 trylock()/lock() 方法，需要在 finally 块中释放锁
        功能丰富程度不同
            reentrantlock 提供有限时间等候锁（设置过期时间）、可中断锁（lockInterruptibly）、condition（提供 await、signal 等方法）等丰富语义
            reentrantlock 提供公平锁和非公平锁实现 synchronized 不可设置等待时间、不可被中断（interrupted）

2. ConcurrentHashmap 为何读不用加锁
    jdk1.7
        （1）HashEntry 中的 key、hash、next 均为 final 型，只能表头插入、删除结点
        （2）HashEntry 类的 value 域被声明为 volatile 型
        （3）不允许用 null 作为键和值，当读线程读到某个 HashEntry 的 value 域的值为 null 时，便知道产生了冲突
            ——发生了重排序现象（put 设置新 value 对象的字节码指令重排序），需要加锁后重新读入这个 value 值
        （4）volatile 变量 count 协调读写线程之间的内存可见性，写操作后修改 count，读操作先读 count，
            根据 happen-before 传递性原则写操作的修改读操作能够看到
    jdk1.8
        （1）Node 的 val 和 next 均为 volatile 型
        （2）tabAt 和 casTabAt 对应的 unsafe 操作实现了 volatile 语义

3. ContextClassLoader（线程上下文类加载器）的作用
    越过类加载器的双亲委派机制去加载类，如 serviceloader 实现，使用线程上下文类加载器加载类，
    要注意保证多个需要通信的线程间的类加载器应该是同一个，防止因为不同的类加载器导致类型转换异常 (ClassCastException)

4. 如何结束一个一直运行的线程
    （1）使用退出标志，这个 flag 变量要多线程可见
    （2）使用 interrupt，结合 isInterrupted() 使用

5. ThreadLocal 使用场景及问题
    （1）threadlocal原理
        类ThreadLocal主要的作用就是将数据放入当前线程对象中的ThreadLocalMap里，
            这个ThreadLocalMap是Thread类的实例变量。
        类ThreadLocal自己不管理，不存储任何数据，只是数据和ThreadLocalMap之间的中介，
            通过ThreadLocal将数据放入ThreadLocalMap中，执行流程:
                data -> ThreadLocal -> currentThread() -> ThreadLocalMap

        执行后每个线程中的ThreadLocalMap就存有自己的数据，ThreadLocalMap的key存储的是ThreadLocal对象，
        value就是存储的值。每个Thread中Map的值只对当前线程可见，其他线程不可以访问当前线程对象中Map的值。

                ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {
                    table = new Entry[INITIAL_CAPACITY];        //firstKey  为当前TheadLocal实例
                    int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);
                    table[i] = new Entry(firstKey, firstValue); //table为    //ThreadLocal类内的Entry数组
                    size = 1;
                    setThreshold(INITIAL_CAPACITY);
                }

        变量threadLocals默认是包级访问，不能直接从外部访问该变量，而ThreadLocal与Thread与该变量在同一个包中

    （2）threadlocal 并不能解决多线程共享变量的问题，
        同一个 threadlocal 所包含的对象，在不同的 thread 中有不同的副本，互不干扰，
        用于存放线程上下文变量，方便同一线程对变量的前后多次读取，如事务、数据库 connection 连接，
        在 web 编程中使用的更多

    问题： 注意线程池场景使用 threadlocal，因为实际变量值存放在了 thread 的 threadlocalmap 类型变量中，
        如果该值没有 remove，也没有先 set 的话，可能会得到以前的旧值
    问题： 注意线程池场景下的内存泄露，虽然 threadlocal 的 get/set 会清除 key（key 为 threadlocal 的弱引用，
        value 是强引用，导致 value 不释放）为 null 的 entry，但是最好 remove

6. 线程池从启动到工作的流程
    刚创建时，里面没有线程调用 execute() 添加任务时：
        （1）如果正在运行的线程数量小于核心参数 corePoolSize，继续创建线程运行这个任务
        （2）否则，如果正在运行的线程数量大于或等于 corePoolSize，将任务加入到阻塞队列中
        （3）否则，如果队列已满，同时正在运行的线程数量小于核心参数 maximumPoolSize，继续创建线程运行这个任务
        （4）否则，如果队列已满，同时正在运行的线程数量大于或等于 maximumPoolSize，根据设置的拒绝策略处理
        （5）完成一个任务，继续取下一个任务处理
        （6）没有任务继续处理，线程被中断或者线程池被关闭时，线程退出执行，如果线程池被关闭，线程结束
        （7）否则，判断线程池正在运行的线程数量是否大于核心线程数，如果是，线程结束，否则线程阻塞。
            因此线程池任务全部执行完成后，继续留存的线程池大小为 corePoolSize

7. 阻塞队列 BlockingQueue take 和 poll 区别
    poll(time)：
        取走 BlockingQueue 里排在首位的对象, 若不能立即取出，则可以等 time 参数规定的时间，取不到时返回 null
    take()：
        取走 BlockingQueue 里排在首位的对象，若 BlockingQueue 为空，阻塞直到 BlockingQueue 有新的对象被加入

8. 如何从 FutureTask 不阻塞获取结果
    get(long timeout,TimeUnit unit)，超时则返回，轮询
    先通过 isDone()判断是否结束，然后调用 get()

9. blockingqueue 如果存放了比较关键的数据，系统宕机该如何处理
    （1）将队列持久化，比较麻烦，需要将生产数据持久化到磁盘，持久化成功才返回，消费者线程从磁盘加载数据到内存阻塞队列中，
        维护消费 offset，启动时，根据消费 offset 从磁盘加载数据
    （2）加入消息队列，保证消息不丢失，生成序列号，消费幂等，根据消费进程决定系统重启后的生产状态

10. NIO 与传统 I/O 的区别
    （1）节约线程，NIO 由原来的每个线程都需要阻塞读写变成了由单线程（即 Selector）负责处理多个 channel 注册（register）
        的兴趣事件（SelectionKey）集合（底层借助操作系统提供的 epoll()），netty bossgroup 处理 accept 连接
        （没看明白为什么 bossgroup 设置多个 thread 的必要性），workergroup 处理具体业务流程和数据读写
    （2）NIO 提供非阻塞操作
    （3）传统 I/O 以流的方式处理数据，而 NIO 以块的方式处理数据，
        NIO 提供 bytebuffer，分为堆内（简介缓冲区，在JVM内）和堆外缓冲区（直接缓冲区），读写时均先放到该缓冲区中，
        然后由内核通过 channel 传输到对端，堆外缓冲区不走内核，提升了性能

11. list 中存放可重复字符串，如何删除某个字符串
    （1）调用 iterator 相关方法删除
    （2）倒删，防止正序删除导致的数组重排，index 跳过数组元素问题

12. GC相关 Garbage Collection
    GC主要就是在Java堆中进行的
    Java堆：Java虚拟机管理的内存中最大的一块，所有线程共享，几乎所有的对象实例和数组都在这类分配内存。
    堆内存又分为：新生代和老年代，并且一般新时代的空间比老年代大。

    （1）GC的主要任务
        1.分配内存
        2.确保被引用对象的内存不被错误的回收
        3.回收不再被引用的对象的内存空间

    （2）GC主要解决的问题
        一， 哪些内存需要回收？
        1. 引用计数算法：
            每当一个地方引用它时，计数器+1；引用失效时，计数器-1；计数值=0——不可能再被引用。
            但是会发现并没有因为两个对象互相引用就没有回收，因此引用计数算法很难解决对象之间相互矛盾循环引用的问题
        2.可达性分析算法：
            向图，树图，把一系列“GC Roots”作为起始点，从节点向下搜索，路径称为引用链，
            当一个对象到GC Roots没有任何引用链相连，即不可达时，则证明此对象时不可用的。

        二， 什么时候回收？
            即使是被判断不可达的对象，也要再进行筛选，当对象没有覆盖finalize()方法，
            或者finalize方法已经被虚拟机调用过，则没有必要执行；

            对象可以在被GC时可以自我拯救(this)，机会只有一次，因为任何一个对象的finalize（）
            方法都只会被系统自动调用一次。并不建议使用，应该避免。使用try_finaly或者其他方式。

        三， 如何回收？
            垃圾收集算法：
            1.标记—清除算法
                两个阶段：标记，清除；
                不足：效率问题；空间问题(会产生大量不连续的内存碎片)
            2.复制算法
                将可用内存按容量分为大小相等的两块，每次都只使用其中一块；
                不足：将内存缩小为了原来的一半
                新生代
            3.标记—整理算法
                标记，清除（让存活的对象都向一端移动）
                老年代

            4. 垃圾回收器
                新生代： Serial（串行，单线程） ParNew（并行，Serial的多线程版本） ParallelScavenge（复制算法）
                老年代： CMS（标记-清除） SerialOld（MSC） ParallelOld
                    CMS，全称Concurrent Low Pause Collector

        新建的对象再新生代中，如果新生代内存不够，就进行Minor GC释放掉不活跃对象；
        如果还是不够，就把部分活跃对象复制到老年代中，如果还是不够，就进行MajorGC释放老年代，
        如果还是不够，JVM会抛出内存不足，发生oom，内存泄漏。

13. 单点登录
    在一个多系统共存的环境下，用户在一处登录后，就不用在其他系统中登录，也就是用户的一次登录能得到其他所有系统的信任

    (1)以Cookie作为凭证媒介
        用户登录父应用之后，应用返回一个加密的cookie，当用户访问子应用的时候，携带上这个cookie，
        授权应用解密cookie并进行校验，校验通过则登录当前用户
        //Cookie不安全，Cookie的加密算法泄露，攻击者通过伪造Cookie则可以伪造特定用户身份
        //不能跨域实现免登
    (2)通过JSONP实现
        用户在父应用中登录后，跟Session匹配的Cookie会存到客户端中，当用户需要登录子应用的时候，
        授权应用访问父应用提供的JSONP接口，并在请求中带上父应用域名下的Cookie，父应用接收到请求，
        验证用户的登录状态，返回加密的信息，子应用通过解析返回来的加密信息来验证用户，如果通过验证则登录用户
    (3)通过页面重定向的方式
        父应用提供一个GET方式的登录接口，用户通过子应用重定向连接的方式访问这个接口，如果用户还没有登录，
        则返回一个的登录页面，用户输入账号密码进行登录。如果用户已经登录了，则生成加密的Token，
        并且重定向到子应用提供的验证Token的接口，通过解密和校验之后，子应用登录当前用户

14.Maven 更换远程地址及本地仓库地址
    （1）修改本地仓库位置
        打开maven安装目录下面conf文件夹内的settings.xml,在localRepository注释下面加一行
        <localRepository>F:\maven\repository</localRepository>设置本地仓库位置
    （2）更换远程地址
        打开maven安装目录下面conf文件夹内的settings.xml,找到<mirrors>注释，在下面加上如下配置
            <mirror>
                 <id>alimaven</id>
            	 <name>aliyun maven</name>
            	 <url> http://maven.aliyun.com/nexus/content/groups/public/</url>
            	 <mirrorOf>central</mirrorOf>
            </mirror>
        更换远程库为阿里云镜像库

15.maven 包依赖问题 A-> B -> C1.0  A -> C2.0
    （1）GroupId与ArtifactId
        GroupId可以简单理解为项目开发团队的统一标识，一般分为多段，第一段代表域，org,com等，第二段代表公司团队名称
        ArtifactId为实际的项目名称

    （2）冲突解决
        Maven对同一个groupId,artifactId的冲突仲裁，是依赖路径越短越优先进行保留
        使用mvn dependency:tree 导出全部的依赖
        同一个jar包但groupId, artifactId不同，可以通过pom.xml dependency内设定<exclusion>排除冲突的包
        路径较长的话直接在pom,xml内写入，路径短优先级高
        可以通过mvn install确认打出来的war是否有被排除的依赖

16.不使用递归和栈，遍历二叉树
void inorderMorrisTraversal(TreeNode *root) {
     TreeNode *cur = root, *prev = NULL;
     while(cur != NULL) {
         if(cur->left == NULL) {    // 1. cur 的左孩子为 NULL
             printf("%d ", cur->val);
             cur = cur->right;
         }
         else {
             // 寻找前驱节点
             prev = cur->left;
             while(prev->right != NULL && prev->right != cur) prev = prev->right;

             if(prev->right == NULL) {    // 2.1. 前驱节点的右孩子为 NULL
                 prev->right = cur;
                 cur = cur->left;
             }
             else {                       // 2.2. 前驱节点的右孩子不为 NULL（为当前节点 cur）
                 prev->right = NULL;
                 printf("%d ", cur->val);
                 cur = cur->right;
             }
         }
     }
 }

17.Sql 开窗函数
    （1）举例
        未使用开窗函数：
        select fname,
               fcity,
               fsalary,
               (select count(*) from t_person where fsalary < 5000) 工资少于5000员工总数
          from t_person
         where fsalary < 5000

        使用开窗函数：
        select fname, fcity, fsalary, count(*) over() 工资小于5000员工数
          from t_person
         where fsalary < 5000

    （2）开窗函数格式
        函数名（列） over（PARTITION BY 列名） 结果集字段名
        如果 OVER 关键字后的括号中的选项为空，则开窗函数会对结果集中的所有行进行聚合运算。

    （3）PARTITION BY
        开窗函数的 OVER 关键字后括号中的可以使用 PARTITION BY 子句来定义行的分区来供进行聚合计算

    （4）ORDER BY
        开窗函数中可以在OVER关键字后的选项中使用ORDER BY子句来指定排序规则，而且有的开窗函数还要求必须指定排序规则。
        使用ORDER BY子句可以对结果集按照指定的排序规则进行排序，并且在一个指定的范围内进行聚合运算

            ORDER BY 字段名 RANGE|ROWS BETWEEN 边界规则1 AND 边界规则2

    （5）高级开窗函数/ 排名的实现ROW_NUMBER();RANK() ,DENSE_RANK()

        还可以在开窗函数中使用一些高级的函数，有些函数同时被DB2和Oracle同时支持，比如
        RANK()、DENSE_RANK()、ROW_NUMBER()，而有些函数只被Oracle支持，比如
        RATIO_TO_REPORT()、NTILE()、LEAD()、LAG()、FIRST_VALUE()、LAST_VALUE()。

        SELECT FName, FSalary,FAge,
        RANK() OVER(ORDER BY fsalary desc) f_RANK,
        DENSE_RANK() OVER(ORDER BY fsalary desc) f_DENSE_RANK,
        ROW_NUMBER() OVER(ORDER BY fsalary desc) f_ROW_NUMBER
        FROM T_Person;


        RANK(),DENSE_RANK()语法：
            RANK()
            DENSE_RANK()
            【语法】RANK ( ) OVER ( [query_partition_clause] order_by_clause )
                dense_RANK ( ) OVER ( [query_partition_clause] order_by_clause )

            【功能】聚合函数RANK 和 dense_rank 主要的功能是计算一组数值中的排序值。
            【参数】dense_rank与rank()用法相当，
            【区别】dence_rank在并列关系是，相关等级不会跳过。rank则跳过
            rank()是跳跃排序，有两个第二名时接下来就是第四名（同样是在各个分组内）
            dense_rank()l是连续排序，有两个第二名时仍然跟着第三名。

        ROW_NUMBER()语法：
            【语法】ROW_NUMBER() OVER (PARTITION BY COL1 ORDER BY COL2)
            【功能】表示根据COL1分组，在分组内部根据 COL2排序，而这个值就表示每组内部排序后的顺序编号（组内连续的唯一的）
            row_number() 返回的主要是“行”的信息，并没有排名
            【参数】
            【说明】Oracle分析函数

            主要功能：用于取前几名，或者最后几名等


18.DB索引失效情况，模糊查询如何使用索引
    1. select * from USER where name=‘xzz’ or age=16；
    例如这种情况：当语句中带有or的时候 即使有索引也会失效。

    2.select *  from  USER where name like‘%xzz’ ；
    例如这种情况：当语句索引 like 带%的时候索引失效（注意：如果上句为 like‘xzz’此时索引是生效的） 

    3.select * from USER where name=123;（此处只是简单做个例子，实际场景中一般name不会为数字的）
    例如这种情况：如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引

    5.假如上述将name和age设置为联合索引，一定要注意顺序，mysql联合所以有最左原则，下面以name，age的顺序讲下
    （1）select * from USER where name=‘xzz’ and age =11；
    （2）select * from USER where age=11 and name=‘xzz’；
    例如上诉两种情况：以name，age顺序为联合索引，（1）索引是生效的，（2）索引是失效的

    6.比如age为索引：select * from USER where age-1>11;
    例如这种情况：索引失效，不要在索引上进行操作，否则索引会失效（是有类似时间转换的问题和上诉问题一样）

19.sql优化
    1. 对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引
    2. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描
        最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.
    3. 应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描
    4. 应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，
        将导致引擎放弃使用索引而进行全表扫描
            select id from t where num=10 or Name = 'admin'
            可以这样做：
            select id from t where num = 10
            union all
            select id from t where Name = 'admin'
    5. in 和 not in 不走索引，对于连续的数值，能用between和exists代替的就不用in和not in
            select num from a where num in(select num from b)
            替换为：
            select num from a where exists(select 1 from b where num=a.num)
    6. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描
            select id from t where num/2 = 100
            应替换为：
            select id from t where num = 100*2
    7. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描
            select id from t where substring(name,1,3) = ’abc’       -–name以abc开头的id
            select id from t where datediff(day,createdate,’2005-11-30′) = 0    -–‘2005-11-30’    --生成的id
            应改为：
            select id from t where name like 'abc%'
            select id from t where createdate >= '2005-11-30' and createdate < '2005-12-1'
    8. 对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。

    9. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型

    10. 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间

    11. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log

    12. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table

    13. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写

20.Redis基本使用
    1.Redis的value支持字符串，链表，集合，有序集合，常量，hash
    2.redis-cli -h <ip> -p <port> 客户端连接Redis Server
    3.ping 检查是否连接成功
    4.set <key> <value>/ get <key>
    5.del <key>
    6.keys *查看所有的key值

21.Sql乐观锁 悲观锁
    （1）悲观锁
        要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，
        也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。

        //0.开始事务
        begin;/begin work;/start transaction; (三者选一就可以)
        //1.查询出商品信息
        select status from t_goods where id=1 for update;
        //2.根据商品信息生成订单
        insert into t_orders (id,goods_id) values (null,1);
        //3.修改商品status为2
        update t_goods set status=2;
        //4.提交事务
        commit;/commit work;

        使用了 select…for update 的方式，这样就通过开启排他锁的方式实现了悲观锁。
        此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。

        在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；
        另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载

    （2） 乐观锁
        乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，
        才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做

        数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，
        同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与
        第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，
        则予以更新，否则认为是过期数据

        实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳
        使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。
        并判断当前版本号是不是该数据的最新的版本号。

        1.查询出商品信息
        select (status,status,version) from t_goods where id=#{id}
        2.根据商品信息生成订单
        3.修改商品status为2
        update t_goods
        set status=2,version=version+1
        where id=#{id} and version=#{version};

        乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，
        直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，
        还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，
        这时就遇到了问题。


23.未知单向链表，查询倒数第N个元素
    设置两个指针，指针间距为N，然后初始状态，A指针指向链表头，B指针指向第N个元素，
    然后两个指针一起移动，当B指针指向最后一个元素时，A指针指向倒数第N个元素